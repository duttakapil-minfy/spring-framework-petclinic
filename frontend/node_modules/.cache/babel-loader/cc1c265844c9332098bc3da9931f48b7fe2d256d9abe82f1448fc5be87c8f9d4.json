{"ast":null,"code":"var _jsxFileName = \"/Users/minfy/workspace/matson/petclinic-original/frontend/src/components/vets/VetsList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getVets } from '../../services/apiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VetsList = () => {\n  _s();\n  const [vets, setVets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchVets = async () => {\n      try {\n        const response = await getVets();\n        setVets(response.data);\n      } catch (error) {\n        console.error('Error fetching vets:', error);\n        setError('Failed to fetch veterinarians. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchVets();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Veterinarians\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), vets.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: \"No veterinarians found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table table-striped\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Specialties\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: vets.map(vet => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [vet.firstName, \" \", vet.lastName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: vet.specialties && vet.specialties.length > 0 ? vet.specialties.map((specialty, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [index > 0 && ', ', specialty.name]\n            }, specialty.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"none\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)]\n        }, vet.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(VetsList, \"GSmb8sWLeaOq5BxQtjCSo9+4H0M=\");\n_c = VetsList;\nexport default VetsList;\nvar _c;\n$RefreshReg$(_c, \"VetsList\");","map":{"version":3,"names":["React","useState","useEffect","getVets","jsxDEV","_jsxDEV","VetsList","_s","vets","setVets","loading","setLoading","error","setError","fetchVets","response","data","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","length","map","vet","firstName","lastName","specialties","specialty","index","name","id","_c","$RefreshReg$"],"sources":["/Users/minfy/workspace/matson/petclinic-original/frontend/src/components/vets/VetsList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getVets } from '../../services/apiService';\n\nconst VetsList = () => {\n  const [vets, setVets] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchVets = async () => {\n      try {\n        const response = await getVets();\n        setVets(response.data);\n      } catch (error) {\n        console.error('Error fetching vets:', error);\n        setError('Failed to fetch veterinarians. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchVets();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div className=\"alert alert-danger\">{error}</div>;\n  }\n\n  return (\n    <div>\n      <h2>Veterinarians</h2>\n      \n      {vets.length === 0 ? (\n        <div className=\"alert alert-info\">No veterinarians found</div>\n      ) : (\n        <table className=\"table table-striped\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Specialties</th>\n            </tr>\n          </thead>\n          <tbody>\n            {vets.map((vet) => (\n              <tr key={vet.id}>\n                <td>{vet.firstName} {vet.lastName}</td>\n                <td>\n                  {vet.specialties && vet.specialties.length > 0 ? (\n                    vet.specialties.map((specialty, index) => (\n                      <span key={specialty.id}>\n                        {index > 0 && ', '}\n                        {specialty.name}\n                      </span>\n                    ))\n                  ) : (\n                    <span>none</span>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default VetsList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}